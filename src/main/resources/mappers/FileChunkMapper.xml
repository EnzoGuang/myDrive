<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yg.mydrive.mapper.FileChunkMapper">

    <!-- 将文件-分片关联关系插入表中 -->
    <insert id="insertFileChunk" useGeneratedKeys="true" keyProperty="fileChunk.fileId" keyColumn="id">
        insert into file_chunk (file_id, chunk_id, chunk_index, version_id, upload_time)
            values (#{fileChunk.fileId}, #{fileChunk.chunkId}, #{fileChunk.chunkIndex}, #{fileChunk.versionId}, #{fileChunk.uploadTime})
    </insert>

    <!-- 更新file-chunk记录的版本id -->
    <update id="updateVersionId">
        update file_chunk set version_id = #{versionId} where id = #{fileChunkId}
    </update>

    <!-- 通过文件id和版本id获得所有分片的id,id按照分片的序号从小到大排列 -->
    <select id="getAllChunksId" resultType="java.lang.Integer">
        select chunk_id
        from file_chunk
        where file_id = #{fileId}
        <if test="versionId == null">
            and version_id is null
        </if>
        <if test="versionId != null">
            and version_id = #{versionId}
        </if>
        order by chunk_index asc
    </select>

    <!-- 通过fileId获得所有的FileChunk记录 -->
    <select id="getAllFileChunkByFileId" resultType="com.yg.mydrive.entity.FileChunk">
        select id fileChunkId,
            file_id fileId,
            chunk_id chunkId,
            chunk_index chunkIndex,
            version_id versionId
        from file_chunk
        where file_id = #{fileId}
        <if test="versionId != null">
            and version_id = #{versionId}
        </if>
        <if test="versionId == null">
            and version_id is null
        </if>
        order by chunk_index asc
    </select>

</mapper>
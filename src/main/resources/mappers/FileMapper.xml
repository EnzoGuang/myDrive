<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yg.mydrive.mapper.FileMapper">

    <!-- 通过用户id和父文件id该查找该路径下所有文件 -->
    <select id="findFileByUserIdAndFolderId" resultType="com.yg.mydrive.entity.Files">
        select file_name fileName,
        file_hash fileHash,
        file_size fileSize,
        total_chunks totalChunk,
        folder_id folderId,
        user_id userId,
        version_control_enabled versionControlEnabled,
        current_version_id currentVersionId,
        upload_time uploadTime,
        id fileId
        from file where user_id = ${userId}
        <if test="folderId == null">
            and folder_id is null
        </if>
        <if test="folderId != null">
            and folder_id = ${folderId}
        </if>
        and status = 'active'
    </select>

    <!-- 初始化文件记录 -->
    <insert id="initializeFile" useGeneratedKeys="true" keyProperty="file.fileId" keyColumn="id">
        insert into file (file_name, total_chunks, folder_id, user_id, version_control_enabled,upload_time)
        values (#{file.fileName}, #{file.totalChunks}, #{file.folderId}, #{file.userId}, #{file.versionControlEnabled}, #{file.uploadTime})
    </insert>

    <!-- 根据文件id,更新该文件的大小 -->
    <update id="updateFileSize">
        update file set file_size = #{fileSize} where id = #{fileId};
    </update>

    <!-- 查找文件通过文件id -->
    <select id="getFileById" resultType="com.yg.mydrive.entity.Files">
        select id fileId,
            file_name fileName,
            file_hash fileHash,
            file_size fileSize,
            total_chunks totalChunks,
            folder_id folderId,
            user_id userId,
            version_control_enabled versionControlEnabled,
            current_version_id currentVersionId,
            upload_time uploadTime,
            status,
            delete_time deleteTime
        from file
        where id = #{fileId} and status = 'active' and user_id = #{userId}
    </select>



    <!-- 更新文件名通过文件id -->
    <update id="updateFileNameById">
        update file set file_name = #{newFileName} where user_id = #{userId} and id = #{fileId}
    </update>

    <!-- 根据目录id移动文件到指定的目录 -->
    <update id="updateParentFolderId">
        update file set folder_id = #{targetFolderId} where user_id = #{userId} and id = #{fileId};
    </update>

    <!-- 生成文件分享保存的记录 -->
    <insert id="generateShareFileRecord" useGeneratedKeys="true" keyProperty="file.fileId" keyColumn="id">
        insert into file (file_name, file_hash, file_size, total_chunks, folder_id, user_id, upload_time)
            values (#{file.fileName}, #{file.fileHash}, #{file.fileSize}, #{file.totalChunks}, #{file.folderId}, #{file.userId}, #{file.uploadTime});
    </insert>

    <!-- 通过文件夹id查找所有属于该文件夹的文件 -->
    <select id="findFilesIdInFolder" resultType="java.lang.Integer">
        select id
        from file
        where user_id = #{userId}
        <if test="folderId == null">
            and folder_id is null
        </if>
        <if test="folderId != null">
            and folder_id = #{folderId}
        </if>
    </select>

    <!-- 设置文件的status,status为'active'或'deleted' -->
    <update id="updateFileStatus">
        update file set status = #{status},
        <if test="status == 'active'">
            delete_time = null
        </if>
        <if test="status == 'deleted'">
            delete_time = now()
        </if>
        where user_id = #{userId} and id = #{fileId}

    </update>

    <!-- 更新文件的版本id号 -->
    <update id="updateVersionId">
        update file set current_version_id = #{versionId} where id = #{fileId}
    </update>

    <!-- 开启文件版本控制 -->
    <update id="versionControlEnable">
        update file set version_control_enabled = true where id = #{fileId};
    </update>

    <!-- 获得删除的文件不属于任何已删除的文件夹 -->
    <select id="findFilesNotInDeletedFolders" resultType="com.yg.mydrive.entity.Files">
        WITH RECURSIVE deleted_folders AS (
            SELECT id, folder_name
            from folder
            where status = 'deleted' and user_id = #{userId}
            union all
            select folder.id, folder.folder_name
            from folder
            inner join deleted_folders on folder.parent_folder_id = deleted_folders.id
            where folder.user_id = #{userId}
        )
        select
            f.id fileId,
            f.file_name fileName,
            f.file_hash fileHash,
            f.file_size fileSize,
            f.total_chunks totalChunks,
            f.folder_id folderId,
            f.user_id userId,
            f.version_control_enabled versionControlEnabled,
            f.current_version_id currentVersionId,
            f.upload_time uploadTime,
            f.status,
            f.delete_time deleteTime
        from file f
        where not exists (select 1 from deleted_folders df where f.folder_id = df.id)
        and f.status = 'deleted' and f.user_id = #{userId}
    </select>
</mapper>